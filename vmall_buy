from selenium.webdriver.common.action_chains import ActionChains
from threading import Thread
import time
from selenium import webdriver
from selenium.webdriver.chrome.service import Service

# 账号密码
ACCOUNTS = {
    "账号": "密码"
}

# chrome driver路径
chrome_driver = "/usr/local/bin/chromedriver"  # Mac示例

# 手机链接
BUY_URL = 'https://www.vmall.com/product/10086009079805.html'
# 开始自动刷新等待抢购按钮出现的时间点,建议提前10-30s，并提前2-5分钟启动python脚本，确保登陆成功，进入页面。
BEGIN_GO = '2023-09-06 10:07:55'
# 是否启动自动选手机参数。1为开启，0为关闭。当不启用时，无需填写下面的参数，此时抢购会默认网页上的默(第一个颜色、版本、套餐)。若不需要请关闭此选项能加快速度。
AUTO_SELECT = 1
# 是否启动自动选手机颜色
AUTO_COLOR = 1
# 是否启动自动选手机版本
AUTO_EDITION = 0
# 是否启动自动选手机套餐
AUTO_COMBO = 0
# 颜色，仅当AUTO_SELECT=1和AUTO_COLOR=1时才需要写
COLOR = '雅川青'
# 版本，仅当AUTO_SELECT=1和AUTO_EDITION=1时才需要写
EDITION = '5G全网通 8GB+256GB'
# 套餐，仅当AUTO_SELECT=1和AUTO_COMBO=1时才需要写
COMBO = '官方标配'
# 登陆信任 0表示不信任，1表示信任。一般无需改动。若信任，当您下次登录时，系统将不会要求您提供验证码。对于HUAWEI STORE普通版脚本，每次运行脚本即创建一个新Chrome，信任意义不大，默认为0，建议设置为0
TRUST = 0

# 登录url,一般无需改动
LOGIN_URL = "https://id1.cloud.huawei.com/CAS/portal/loginAuth.html?reqClientType=26&loginChannel=26000000&regionCode=cn&loginUrl=https%3A%2F%2Fid1.cloud.huawei.com%3A443%2FCAS%2Fportal%2FloginAuth.html&lang=zh-cn&themeName=red&clientID=10049053&scope=https%3A%2F%2Fwww.huawei.com%2Fauth%2Faccount%2Fnopwdlowlogin&state=null&service=https%3A%2F%2Foauth-login1.cloud.huawei.com%2Foauth2%2Fv3%2FloginCallback%3Faccess_type%3Doffline%26client_id%3D10049053%26code_challenge_method%3DS256%26display%3Dpage%26flowID%3D0a8a554d000001d16939657652623471%26h%3D1693965765.2620%26include_granted_scopes%3Dtrue%26lang%3Dzh-cn%26nonce%3Ddefault%26prompt%3Dlogin%26redirect_uri%3Dhttps%253A%252F%252Fwww.vmall.com%252Faccount%252Fatlogin%253Furl%253D%25252Fproduct%25252F10086009079805.html%25252310086478286478%26response_type%3Dcode%26scope%3Dopenid%2Bhttps%253A%252F%252Fwww.huawei.com%252Fauth%252Faccount%252Fbase.profile%2Bhttps%253A%252F%252Fwww.huawei.com%252Fauth%252Faccount%252Faccountlist%2Bhttps%253A%252F%252Fwww.huawei.com%252Fauth%252Faccount%252Fnopwdlowlogin%26v%3D03c20b3b9b23fcb7935e473f2ed49b23432330f8bb966bca590803c78f88f614&validated=true"

# 排队中
def on_queue(driver, user):
    time.sleep(0.5)
    print(user + '开始排队：' + BEGIN_GO)
    while True:

        submit_button = driver.find_elements("link text", '提交订单')
        if len(submit_button) > 0:
            print(user + ':成功！排队页面跳转了!!!!!!!!!!!!!!')
            submit_button[0].click()

            time.sleep(1)
            break
        else:
            sold_out = driver.find_elements("xpath", "//*[starts-with(text(), '抱歉，已售完')]")
            if len(sold_out) > 0:
                break
            time.sleep(0.1)  # 继续排队

    time.sleep(10)
    print("欢迎下次使用，程序退出...")
    exit(0)


# 选择手机规格
def select(driver, user):
    if AUTO_COLOR == 1:
        try:
            color = driver.find_element("link text", COLOR)
            # color = driver.find_element()
            color.click()
            print(user + COLOR + '选择成功！')
        except:
            time.sleep(1)
            try:
                color = driver.find_element("link text", COLOR)
                color.click()
                print(user + COLOR + '选择成功！')
            except:
                print(user + '颜色选择错误！请手动选择！')
    else:
        print(user + '无需选择颜色')

    if AUTO_EDITION == 1:
        try:
            edition = driver.find_element("link text", EDITION)
            edition.click()
            print(user + EDITION + '选择成功！')
        except:
            time.sleep(1)
            try:
                edition = driver.find_element("link text", EDITION)
                edition.click()
                print(user + EDITION + '选择成功！')
            except:
                print(user + '版本选择错误！请手动选择！')
    else:
        print(user + '无需选择版本')

    if AUTO_COMBO == 1:
        try:
            combo = driver.find_element("link text", COMBO)
            combo.click()
            print(user + COMBO + '选择成功！')
        except:
            time.sleep(1)
            try:
                combo = driver.find_element("link text", COMBO)
                combo.click()
                print(user + COMBO + '选择成功！')
            except:
                print(user + '套餐选择错误！请手动选择！')
    else:
        print(user + '无需选择套餐')


# 登录成功去到购买页面
def go_to_buy(driver, user):
    autoSelect = AUTO_SELECT
    driver.get(BUY_URL)
    time.sleep(0.5)
    if BUY_URL != driver.current_url:
        driver.get(BUY_URL)
    print(user + '打开购买页面')
    time.sleep(0.5)
    # 转换成抢购时间戳
    timeArray = time.strptime(BEGIN_GO, "%Y-%m-%d %H:%M:%S")
    timestamp = time.mktime(timeArray)
    # 再次登陆
    try:
        denglu1 = driver.find_element("id", "top-index-loginUrl")
        denglu1.click()
        time.sleep(0.5)
    except:
        print(user + '已经登陆')
    # 结束标志位
    over = False
    time.sleep(0.5)
    if autoSelect == 1:
        select(driver, user)
    else:
        print(user + '跳过选择配置')
    isRemind = 0
    print_times = 0
    while True:
        if isRemind == 0:
            print(time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()) + user + '准备完毕，开始等待')
            isRemind = 1
        if time.time() >= timestamp:  # 到了抢购时间
            try:
                text = driver.find_elements("xpath", '//*[@id="pro-operation"]/a')[0].text
            except IndexError:
                text = "立即下单"

            if text == "即将开始":
                print("即将开始....")
                time.sleep(0.5)
                continue

            if text == '已售完':
                over = True
                break
            elif text == "立即下单":

                buy_button = driver.find_elements("xpath", "//*[contains(text(), '立即下单')]")
                if len(buy_button) > 0:
                    buy_button = buy_button[0]
                else:
                    buy_button = driver.find_elements("xpath", "//*[starts-with(text(), '立即')]")[0]

                isRemindd = 0
                try:
                    if buy_button.get_attribute('class') != 'product-button02 disabled':
                        print(time.strftime("%Y-%m-%d %H:%M:%S",
                                            time.localtime()) + user + '可以开始申购，立即申购')
                        buy_button.click()
                        break
                except:
                    buy_button = driver.find_element("link text", '立即购买')
            else:
                over = True
                break
        elif time.time() < timestamp - 15:
            if isRemind == 1:
                isRemind = 2
                print(time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()) +
                      user + '未到脚本开启时间，请选择好抢购的颜色、版本、套餐等(若已经配置则忽略)，将在设定的脚本启动时间前15秒启动')
            else:
                print('-', end="")
                print_times = print_times + 1
                if print_times > 50:
                    print_times = 0
                    print("\n")
            time.sleep(0.5)
        else:
            if isRemind == 1 or isRemind == 2:
                if isRemind == 2:
                    print("")
                isRemind = 3
                print(time.strftime("%Y-%m-%d %H:%M:%S",
                                    time.localtime()) + user + '即将开始抢购，程序启动')
                time.sleep(0.05)

    if over:
        print(user + "很遗憾，" + time.strftime("%H:%M:%S",
                                            time.localtime()) + "抢购结束,程序将在60s后退出")
        time.sleep(60)
        driver.quit()
        exit()
    else:
        on_queue(driver, user)


# 信任浏览器(driver)
def trustdriver(driver, user):
    try:
        if TRUST == 0:
            try:
                trust = driver.find_element("xpath",
                                            '//div[@ht="click_dialog_leftbtn"]')
                trust.click()
            except:
                print(user + '不信任出错，请自行点击不信任')
        if TRUST == 1:
            try:
                trust = driver.find_element("xpath",
                                            '//div[@ht="click_dialog_rightbtn"]')
                trust.click()
            except:
                print(user + '信任出错，请自行点击信任')
    except:
        return


# 发送验证码


def sendcode(driver, user):
    try:
        isGetVerification = driver.find_element("xpath",
                                                '//div[@ht="click_authentication_getAuthcode"]')
        number = driver.find_element("xpath", '//div[@id="accountDiv"]')
    except:
        time.sleep(0.2)
    if isGetVerification.text == '获取验证码':
        isGetVerification.click()
        if number is None:
            print(user + '验证码已经发送')
        else:
            print(user + '验证码已经发送至' + number.text)
        try:
            inputdiv = driver.find_element("xpath",
                                           '//input[@ht="input_authentication_authcode"]')
            inputdiv.click()
            # 自动点击输入框
        except:
            time.sleep(0.1)
    time.sleep(0.1)


# 登录商城,登陆成功后至商城首页然后跳转至抢购页面


def loginMall(user, pwd):
    service = Service(executable_path=chrome_driver)
    options = webdriver.ChromeOptions()
    driver = webdriver.Chrome(service=service, options=options)

    # driver = webdriver.Chrome()
    driver.get(LOGIN_URL)
    try:
        time.sleep(3)  # 等待页面加载完成
        account = driver.find_element("xpath",
                                      '/html/body/div/div/div[1]/div[3]/div[3]/span[3]/div[1]/form/div[2]/div/div/div/input')
        account.send_keys(user)
        password = driver.find_element("xpath",
                                       '/html/body/div/div/div[1]/div[3]/div[3]/span[3]/div[1]/form/div[3]/div/div/div/input')
        password.send_keys(pwd)
        denglu = driver.find_element("xpath",
                                     '/html/body/div/div/div[1]/div[3]/div[3]/span[3]/div[1]/div[2]/div')
        ActionChains(driver).move_to_element(denglu).perform()
        time.sleep(1)
        denglu.click()
        print(user + '成功输入了账号密码，尝试登陆.')
    except:
        print(user + '账号密码不能输入,请手动输入并登陆！')
    isRemind = 0
    islogin = 0
    while True:
        time.sleep(0.5)
        if "登录" not in driver.title:  # 页面跳转登陆成功
            print(time.strftime("%Y-%m-%d %H:%M:%S",
                                time.localtime()) + user + '登录成功！！')
            go_to_buy(driver, user)
            break
        else:  # 没有登陆成功
            if isRemind == 0:
                print(user + '请手动完成认证并登陆！')
                isRemind = 1
            try:  # 判断是否在获取验证码界面
                isGetVerification = driver.find_element("xpath",
                                                        '//div[@class="hwid-dialog-header paddingBottom18"]/div')
                if isGetVerification.text == '身份验证':
                    sendcode(driver, user)
                    islogin = 1
            except:
                try:
                    denglu = driver.find_element("link text", '登陆')
                    denglu.click()
                    print(denglu)
                except:
                    time.sleep(0.05)
            if islogin == 1:
                try:  # 判断是否在信任浏览器界面
                    isGetVerification = driver.find_element("xpath",
                                                            '//div[@class="hwid-dialog-header paddingBottom40"]/div')
                    if '是否信任此浏览器' in isGetVerification.text:
                        islogin = 2
                        trustdriver(driver, user)
                except:
                    time.sleep(0.05)
            if islogin == 0 or islogin == 1:
                error = ""
                try:
                    error = driver.find_element("xpath",
                                                '//div[@class="marginTB8 hwid-input-msg-error"]').text
                    print(error)
                except:
                    time.sleep(0.1)
                if '图形验证码' in error:
                    try:
                        denglu.click()
                    except:
                        time.sleep(0.1)
                elif '较为频繁' in error:
                    print('验证码获取频繁，请一小时后再试，或者使用HUAWEI STORE GO DEV版信任浏览器')
                    print('60s后程序退出')
                    time.sleep(60)
                    exit()


if __name__ == "__main__":
    # 账号密码
    data = ACCOUNTS
    # 构建线程
    threads = []
    for account, pwd in data.items():
        t = Thread(target=loginMall, args=(account, pwd,))
        threads.append(t)
        # 启动所有线程
    for thr in threads:
        time.sleep(1)
        thr.start()
